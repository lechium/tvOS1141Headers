//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "PBSDisplayManagerServiceInterface.h"
#import "PBSDisplayState.h"
#import "PBSMigrationHandling.h"

@class NSArray, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSNumber, NSObject<OS_dispatch_source>, NSSet, NSString, NSUserDefaults, PBSDisplayMode, SSDisplay;

@interface PBDisplayManager : NSObject <PBSDisplayState, PBSDisplayManagerServiceInterface, PBSMigrationHandling>
{
    _Bool _filteredUsingdPineBoardPolicy;	// 8 = 0x8
    _Bool _isPresentingDisplayAssistant;	// 9 = 0x9
    _Bool _canHandleHighBandwidthModes;	// 10 = 0xa
    _Bool _shouldModeSwitchForDynamicRange;	// 11 = 0xb
    _Bool _shouldModeSwitchForFrameRate;	// 12 = 0xc
    _Bool _usesDolbyLowLatency;	// 13 = 0xd
    _Bool _observingFocusedProcess;	// 14 = 0xe
    NSArray *_blackScreenRecoveryDisplayModes;	// 16 = 0x10
    NSMutableDictionary *_nextEstablishModePerDisplays;	// 24 = 0x18
    NSHashTable *_stateObservers;	// 32 = 0x20
    SSDisplay *_systemState;	// 40 = 0x28
    NSObject<OS_dispatch_source> *_notifyClientsSource;	// 48 = 0x30
    NSNumber *_displayConnectionToNotify;	// 56 = 0x38
    double _localeRefreshRate;	// 64 = 0x40
    NSArray *_sortedDisplayModes;	// 72 = 0x48
    PBSDisplayMode *_currentDisplayMode;	// 80 = 0x50
    PBSDisplayMode *_fallbackDisplayMode;	// 88 = 0x58
    PBSDisplayMode *_userSelectedDisplayMode;	// 96 = 0x60
    NSSet *_seenDisplayIDs;	// 104 = 0x68
    NSString *_currentDisplayID;	// 112 = 0x70
    long long _displayConnection;	// 120 = 0x78
    double _userPreferredRefreshRate;	// 128 = 0x80
    NSSet *_encodedPromotedDisplayModes;	// 136 = 0x88
    NSUserDefaults *_defaults;	// 144 = 0x90
    NSDictionary *_memoryStore;	// 152 = 0x98
    NSString *_currentEDIDHash;	// 160 = 0xa0
    NSMutableArray *_requestedDisplayModes;	// 168 = 0xa8
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;	// IMP=0x00000001000edeb0
+ (unsigned long long)migrateWithContext:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000eccb4
+ (unsigned long long)migratePreferenceKeyForDisplayEDID:(id)arg1;	// IMP=0x00000001000ec988
+ (id)sharedInstance;	// IMP=0x00000001000e6734
+ (_Bool)shouldAllowModeSwitchForDynamicFrameRate;	// IMP=0x00000001000415f0
+ (_Bool)shouldAllowModeSwitchForDynamicRange;	// IMP=0x0000000100041554
+ (void)enumerateMutableDisplayPreferencesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100073794
+ (id)attachedDisplayEDIDDigest;	// IMP=0x000000010009c4c0
+ (id)attachedDisplayEDID;	// IMP=0x000000010009c3b8
@property(nonatomic, getter=isObservingFocusedProcess) _Bool observingFocusedProcess; // @synthesize observingFocusedProcess=_observingFocusedProcess;
@property(retain, nonatomic) NSMutableArray *requestedDisplayModes; // @synthesize requestedDisplayModes=_requestedDisplayModes;
@property(copy, nonatomic) NSString *currentEDIDHash; // @synthesize currentEDIDHash=_currentEDIDHash;
@property(retain, nonatomic) NSDictionary *memoryStore; // @synthesize memoryStore=_memoryStore;
@property(retain, nonatomic) NSUserDefaults *defaults; // @synthesize defaults=_defaults;
@property(readonly, nonatomic) _Bool usesDolbyLowLatency; // @synthesize usesDolbyLowLatency=_usesDolbyLowLatency;
@property(copy, nonatomic) NSSet *encodedPromotedDisplayModes; // @synthesize encodedPromotedDisplayModes=_encodedPromotedDisplayModes;
@property(nonatomic) double userPreferredRefreshRate; // @synthesize userPreferredRefreshRate=_userPreferredRefreshRate;
@property(nonatomic) long long displayConnection; // @synthesize displayConnection=_displayConnection;
@property(nonatomic) _Bool shouldModeSwitchForFrameRate; // @synthesize shouldModeSwitchForFrameRate=_shouldModeSwitchForFrameRate;
@property(nonatomic) _Bool shouldModeSwitchForDynamicRange; // @synthesize shouldModeSwitchForDynamicRange=_shouldModeSwitchForDynamicRange;
@property(nonatomic) _Bool canHandleHighBandwidthModes; // @synthesize canHandleHighBandwidthModes=_canHandleHighBandwidthModes;
@property(copy, nonatomic) NSString *currentDisplayID; // @synthesize currentDisplayID=_currentDisplayID;
@property(copy, nonatomic) NSSet *seenDisplayIDs; // @synthesize seenDisplayIDs=_seenDisplayIDs;
@property(copy, nonatomic) PBSDisplayMode *userSelectedDisplayMode; // @synthesize userSelectedDisplayMode=_userSelectedDisplayMode;
@property(copy, nonatomic) PBSDisplayMode *fallbackDisplayMode; // @synthesize fallbackDisplayMode=_fallbackDisplayMode;
@property(copy, nonatomic) PBSDisplayMode *currentDisplayMode; // @synthesize currentDisplayMode=_currentDisplayMode;
@property(copy, nonatomic) NSArray *sortedDisplayModes; // @synthesize sortedDisplayModes=_sortedDisplayModes;
@property(nonatomic) double localeRefreshRate; // @synthesize localeRefreshRate=_localeRefreshRate;
@property(retain, nonatomic) NSNumber *displayConnectionToNotify; // @synthesize displayConnectionToNotify=_displayConnectionToNotify;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *notifyClientsSource; // @synthesize notifyClientsSource=_notifyClientsSource;
@property(retain, nonatomic) SSDisplay *systemState; // @synthesize systemState=_systemState;
@property(retain, nonatomic) NSHashTable *stateObservers; // @synthesize stateObservers=_stateObservers;
@property(nonatomic) _Bool isPresentingDisplayAssistant; // @synthesize isPresentingDisplayAssistant=_isPresentingDisplayAssistant;
@property(retain, nonatomic) NSMutableDictionary *nextEstablishModePerDisplays; // @synthesize nextEstablishModePerDisplays=_nextEstablishModePerDisplays;
@property(nonatomic) _Bool filteredUsingdPineBoardPolicy; // @synthesize filteredUsingdPineBoardPolicy=_filteredUsingdPineBoardPolicy;
@property(copy, nonatomic) NSArray *blackScreenRecoveryDisplayModes; // @synthesize blackScreenRecoveryDisplayModes=_blackScreenRecoveryDisplayModes;
- (void).cxx_destruct;	// IMP=0x00000001000ee6c0
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000001000ee02c
- (void)startObservingFocusedProcess;	// IMP=0x00000001000ede1c
- (void)removeStateObserver:(id)arg1;	// IMP=0x00000001000edd9c
- (void)addStateObserver:(id)arg1;	// IMP=0x00000001000edd1c
- (void)notifyStateChangeForDisplayConnection:(long long)arg1;	// IMP=0x00000001000eda80
- (_Bool)didCompleteDisplayAssistantForCurrentDisplay;	// IMP=0x00000001000ec97c
- (void)displayAssistantDidCompleteForInvocation:(id)arg1 fromUserInteraction:(_Bool)arg2;	// IMP=0x00000001000ec7a4
- (void)forgetDisplaysForDisplayAssistant;	// IMP=0x00000001000ec798
- (void)displayAssistantDidCompleteForInvocation:(id)arg1;	// IMP=0x00000001000ec788
- (void)displayAssistantDidStartForInvocation:(id)arg1;	// IMP=0x00000001000ec65c
- (void)presentDisplayAssistantForInvocation:(id)arg1 destinationDisplayMode:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ec2e0
- (void)handleRegionChangeWithNewCountryCode:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ec290
- (void)wakeDisplayWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ebe68
- (void)sleepDisplayWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00000001000eb850
- (void)completeDisplayTransition:(long long)arg1 error:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x00000001000eb308
- (_Bool)_recalculateDefaultDisplayMode:(id *)arg1;	// IMP=0x00000001000eab08
- (id)_recalculatedBlackScreenRecoveryDisplayModes;	// IMP=0x00000001000ea640
- (id)_recalculatedDisplayModesFromCoreAnimationModes:(id)arg1;	// IMP=0x00000001000e9c6c
- (void)reloadState;	// IMP=0x00000001000e8ee8
- (void)updateDisplayManagerWithRequest:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e8264
- (_Bool)updateCurrentCADisplayFromDisplayMode:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000e7b58
- (void)enableModeSwitchingForFrameRate:(_Bool)arg1;	// IMP=0x00000001000e7b4c
- (void)enableModeSwitchingForDynamicRange:(_Bool)arg1;	// IMP=0x00000001000e7b40
- (id)findMatchingCAMode:(id)arg1;	// IMP=0x00000001000e77fc
- (id)findMatchingLocaleMode:(id)arg1 enforceVirtualCheck:(_Bool)arg2;	// IMP=0x00000001000e77ec
- (id)findFirstMode:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e77e4
- (id)filterModes:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e77dc
- (void)fetchCurrentDisplayStateWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e7754
@property(readonly, nonatomic) NSDictionary *serialisedState;
- (void)dealloc;	// IMP=0x00000001000e6cf4
- (id)_init;	// IMP=0x00000001000e6858
- (id)init;	// IMP=0x00000001000e67ec
- (double)recalculatedCurrentLocaleRefreshRate;	// IMP=0x000000010002c3e8
- (void)updateDisplayForNewRegionWithCountryCode:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010002be4c
- (_Bool)_isModeSwitchInProgress;	// IMP=0x0000000100043e8c
- (void)_notifyDisplayModeChange:(_Bool)arg1;	// IMP=0x0000000100043ca4
- (void)_notifyDisplayModeChangeDidFinish;	// IMP=0x0000000100043c94
- (void)_considerDisplayModeSwitchFinished:(id)arg1;	// IMP=0x0000000100043b8c
- (long long)reportingValueForMatchFrameRate;	// IMP=0x0000000100043b64
- (long long)reportingValueForMatchDynamicRange;	// IMP=0x0000000100043b3c
- (id)_bestSDRDisplayMode;	// IMP=0x00000001000437bc
- (_Bool)_shouldModeSwitchForBundleIdentifier:(id)arg1;	// IMP=0x000000010004336c
- (void)_updateDisplayManagerWithDisplayMode:(id)arg1;	// IMP=0x0000000100042ee4
- (id)_exactDisplayModeForDynamicRange:(long long)arg1 frameRate:(double)arg2;	// IMP=0x0000000100042948
- (id)_bestDisplayModeForDynamicRange:(long long)arg1 frameRate:(double)arg2;	// IMP=0x00000001000425c8
- (id)_fallbackPredicatesForDynamicRange:(long long)arg1 frameRates:(id)arg2;	// IMP=0x0000000100042428
- (id)_displayModePredicatesForDynamicRange:(long long)arg1 frameRate:(double)arg2;	// IMP=0x0000000100042094
- (id)preferredDisplayModeForBundleIdentifier:(id)arg1;	// IMP=0x0000000100041dac
- (void)performModeSwitchForRequestedDisplayModeIfNeeded:(id)arg1;	// IMP=0x0000000100041a0c
- (void)performModeSwitchForBundleIdentifierIfNeeded:(id)arg1;	// IMP=0x00000001000417b8
- (_Bool)isModeSwitchNeededForTransitionTransaction:(id)arg1;	// IMP=0x000000010004168c
- (void)removeNativeAndPerformanceObservers;	// IMP=0x0000000100041504
- (void)addNativeAndPerformanceObservers;	// IMP=0x0000000100041388
- (void)removeDisplayModeForKey:(id)arg1 persisted:(_Bool)arg2;	// IMP=0x0000000100075708
- (id)_readDisplayModeForKey:(id)arg1 persisted:(_Bool)arg2;	// IMP=0x0000000100075514
- (void)_saveDisplayMode:(id)arg1 forKey:(id)arg2 persisted:(_Bool)arg3;	// IMP=0x0000000100075418
- (void)_saveCurrentResolutionsPreferences:(id)arg1 toPersistentStore:(_Bool)arg2;	// IMP=0x0000000100074f68
- (id)_currentResolutionsPreferencesFromPersistentStore:(_Bool)arg1;	// IMP=0x0000000100074b50
- (_Bool)_debugAlwaysSaveModeEnabled;	// IMP=0x0000000100074ad4
- (_Bool)_shouldPreferDolbyVisionLowLatency;	// IMP=0x0000000100074a80
- (id)readEncodedPromotedDisplayModes;	// IMP=0x0000000100074968
- (void)removePromotedDisplayModes;	// IMP=0x0000000100074898
- (void)saveNewPromotedDisplayMode:(id)arg1;	// IMP=0x00000001000745ac
- (void)removeAllCompleteDisplayAssistants;	// IMP=0x00000001000744ac
- (_Bool)readDidCompleteDisplayAssistant;	// IMP=0x00000001000743f4
- (void)saveDidCompleteDisplayAssistant:(_Bool)arg1;	// IMP=0x0000000100074334
- (double)readUserPreferredRefreshRate;	// IMP=0x0000000100074270
- (void)saveUserPreferredRefreshRate:(double)arg1;	// IMP=0x00000001000741e0
- (_Bool)readShouldModeSwitchForFrameRate;	// IMP=0x0000000100074128
- (void)saveShouldModeSwitchForFrameRate:(_Bool)arg1;	// IMP=0x0000000100074068
- (_Bool)readShouldModeSwitchForDynamicRange;	// IMP=0x0000000100073fb0
- (void)saveShouldModeSwitchForDynamicRange:(_Bool)arg1;	// IMP=0x0000000100073ef0
- (_Bool)readCanDoHighBandwidth;	// IMP=0x0000000100073e38
- (void)saveCanHandleHighBandwidthModes:(_Bool)arg1;	// IMP=0x0000000100073d78
- (id)readSeenDisplayIDs;	// IMP=0x0000000100073c0c
- (void)saveCurrentDisplayID:(id)arg1;	// IMP=0x0000000100073ac8
- (void)removeUserSelectedDisplayMode;	// IMP=0x0000000100073ab0
- (id)readUserSelectedDisplayMode;	// IMP=0x0000000100073a98
- (void)saveUserSelectedDisplayMode:(id)arg1;	// IMP=0x0000000100073a80

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

